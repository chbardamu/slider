// Generated by CoffeeScript 1.6.2
/*
slider.coffee (ask chris)

This is the slider for home page, under the new Taxibeat theme (ver.2014)
*/


(function() {
  var header, sElement, sList, slider, subHeader;

  slider = {
    slides: null,
    period: 10,
    container: null,
    header: null,
    subHeader: null,
    currentIndex: 0,
    previousIndex: -1,
    timeout: -1,
    timer: 0,
    currentItem: {},
    loader: null,
    pager: null,
    debug: false,
    swipe: {
      start: {
        x: null,
        y: null
      },
      threshold: 50,
      fast: false
    },
    trace: function(message) {
      if (this.console) {
        return console.log("[home slider] " + message);
      }
    },
    touchStart: function(touchEvent) {
      var touch;

      touch = touchEvent.changedTouches[0];
      this.swipe.start.x = touch.pageX;
      this.swipe.start.y = touch.pageY;
      this.trace("touchstart triggered (" + touch.pageX + ", " + touch.pageY + ")");
    },
    touchMove: function(touchEvent) {
      touchEvent.preventDefault();
    },
    touchEnd: function(touchEvent) {
      var touch;

      touch = touchEvent.changedTouches[0];
      this.resetCurrent();
      if (touch.pageX - this.swipe.start.x >= this.swipe.threshold) {
        this.showPrevious();
        this.trace("touchend triggered (Previous Slide)");
      } else if ((touch.pageX - this.swipe.start.x) <= (-1 * this.swipe.threshold)) {
        this.showNext();
        this.trace("touchend triggered (Next Slide)");
      }
    },
    setup: function(container, pager, header, subHeader) {
      var self, slice,
        _this = this;

      if (!pager) {
        throw arguments.callee + ": Pager is not set.";
      }
      if (!header) {
        throw arguments.callee + ": Header is not set.";
      }
      this.pager = pager;
      this.container = container;
      this.header = header;
      this.subHeader = subHeader;
      if (!container.tagName.match(/UL|OL/)) {
        if (container.children[0].tagName.match(/UL|OL/)) {
          this.container = container.children[0];
        } else {
          throw arguments.callee + ": Slide list cannot be found.";
        }
      }
      this.slides = this.container.children;
      slice = Array.prototype.slice.call(this.slides, 0);
      self = this;
      slice.forEach(function(slide, index) {
        if (index > 0) {
          slide.classList.add("off");
        }
        if (self.swipe.fast) {
          slide.classList.add("fast");
        }
        slide.addEventListener("touchstart", self.touchStart.bind(self), false);
        slide.addEventListener("touchmove", self.touchMove.bind(self), false);
        return slide.addEventListener("touchend", self.touchEnd.bind(self), false);
      });
      this.updateSlide();
      return this;
    },
    updateSlide: function() {
      var currentSlide, imageURL, prevSlide, self;

      imageURL = this.slides[this.currentIndex].getAttribute("data-url");
      prevSlide = this.container.querySelector(":nth-child(" + (this.previousIndex + 1) + ")");
      currentSlide = this.container.querySelector(":nth-child(" + (this.currentIndex + 1) + ")");
      this.trace("previous slide: " + (this.previousIndex + 1) + " -> " + "current slide: " + (this.currentIndex + 1));
      currentSlide.style.backgroundImage = "url('" + imageURL + "')";
      if (prevSlide) {
        prevSlide.className = "off" + (this.swipe.fast ? " fast" : "");
      }
      currentSlide.classList.add("on");
      self = this;
      setTimeout(function() {
        self.header.innerHTML = self.slides[self.currentIndex].getAttribute("data-header");
        self.subHeader.innerHTML = self.slides[self.currentIndex].getAttribute("data-sub-header");
      }, 750);
    },
    showPrevious: function() {
      this.previousIndex = this.currentIndex;
      this.currentIndex -= 1;
      if (this.currentIndex < 0) {
        this.currentIndex = this.slides.length - 1;
        this.previousIndex = 0;
      }
      this.updateSlide();
      return this;
    },
    showNext: function() {
      this.previousIndex = this.currentIndex;
      this.currentIndex += 1;
      if (this.currentIndex >= this.slides.length) {
        this.currentIndex = 0;
        this.previousIndex = this.slides.length - 1;
      }
      this.updateSlide();
      return this;
    },
    resetCurrent: function() {
      this.timer = 0;
      this.currentItem.classList.remove("loading");
      this.currentItem.querySelector("a").className = "";
      this.currentItem.removeChild(this.loader);
      this.loader = null;
    },
    change: function() {
      var _22;

      this.timer += 1;
      this.trace((this.timer / 10) + "s");
      try {
        this.getCurrentLoader().loading(this);
        if (this.timer > (this.period * 20)) {
          this.showNext();
          this.resetCurrent();
        }
      } catch (_error) {
        _22 = _error;
        console.error(_22);
      }
      return this.loop();
    },
    getCurrentLoader: function() {
      this.currentItem = this.pager.querySelector(":nth-child(" + (this.currentIndex + 1) + ")");
      if (!this.currentItem.className.match("loading")) {
        this.trace("slide " + (this.currentIndex + 1));
        this.currentItem.classList.add("loading");
        this.currentItem.querySelector("a").className = "current";
        this.loader = document.createElement("span");
        this.loader.setAttribute("class", "loader");
        this.currentItem.appendChild(this.loader);
      }
      this.loader.loading = function(self) {
        var progress;

        progress = (self.timer / (self.period * 20)) * 102;
        self.trace("waiting ... (" + progress + "%)");
        self.loader.style.width = (Math.round(progress)) + "%";
      };
      return this.loader;
    },
    loop: function() {
      var self;

      self = this;
      return this.timeout = setTimeout(function() {
        return self.change.call(self);
      }, 50);
    },
    kickstart: function() {
      return this.loop();
    },
    stop: function() {
      return clearTimeout(this.timeout);
    }
  };

  sList = document.querySelectorAll(".slides");

  sElement = document.querySelectorAll(".slider");

  header = document.querySelectorAll(".slider-header");

  subHeader = document.querySelectorAll(".slider-sub-header");

  if (window.screen.width > 640) {
    sList = sList[1];
    sElement = sElement[1];
    header = header[1];
    subHeader = subHeader[0];
  } else {
    sList = sList[0];
    sElement = sElement[0];
    header = header[0];
    slider.swipe.fast = true;
  }

  slider.setup(sList, sElement, header, subHeader).kickstart();

}).call(this);
